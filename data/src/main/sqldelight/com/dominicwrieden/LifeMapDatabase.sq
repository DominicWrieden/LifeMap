import android.location.Location;
import android.net.Uri;
import com.dominicwrieden.api.model.PropertyType;
import java.net.URI;
import org.threeten.bp.OffsetDateTime;

CREATE TABLE state (
    remoteIdState TEXT NOT NULL UNIQUE PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT NOT NULL
);


CREATE TABLE area (
    remoteIdArea TEXT NOT NULL UNIQUE PRIMARY KEY,
    name TEXT NOT NULL,
    geoDbID TEXT NOT NULL,
    geoDbName TEXT NOT NULL,
    geoDbFilePath TEXT,
    geoDbCreateDate INTEGER AS OffsetDateTime NOT NULL
);

CREATE TABLE user (
    remoteIdUser TEXT NOT NULL UNIQUE PRIMARY KEY,
    email TEXT NOT NULL,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL
);

CREATE TABLE area_user(
    remoteIdUser TEXT NOT NULL,
    remoteIdArea TEXT NOT NULL,
    PRIMARY KEY (remoteIdUser, remoteIdArea),
    FOREIGN KEY(remoteIdUser) REFERENCES user(remoteIdUser),
    FOREIGN KEY(remoteIdArea) REFERENCES area(remoteIdArea)
);

CREATE TABLE itemType (
    remoteIdItemType TEXT NOT NULL UNIQUE PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT
);




CREATE TABLE item (
    localIdItem INTEGER NOT NULL UNIQUE PRIMARY KEY AUTOINCREMENT,
    remoteIdItem TEXT,
    remoteIdArea TEXT,
    createDate INTEGER As OffsetDateTime NOT NULL,
    idReporter TEXT NOT NULL,
    FOREIGN KEY(remoteIdArea) REFERENCES area(remoteIdArea),
    FOREIGN KEY(idReporter) REFERENCES user(remoteIdUser)
);

CREATE TABLE itemEntry(
    localIdItemEntry INTEGER NOT NULL UNIQUE PRIMARY KEY AUTOINCREMENT,
    remoteIdItemEntry TEXT,
    localIdItem INTEGER NOT NULL,
    idReporter TEXT NOT NULL,
    createDate INTEGER AS OffsetDateTime NOT NULL,
    idItemType TEXT,
    location TEXT AS Location,
    idState TEXT,
    note TEXT,
    FOREIGN KEY(localIdItem) REFERENCES item(localIdItem),
    FOREIGN KEY(idReporter) REFERENCES user(remoteIdUser),
    FOREIGN KEY(idItemType) REFERENCES itemType(remoteIdItemType),
    FOREIGN KEY(idState) REFERENCES state(remoteIdState)
);

CREATE TABLE property(
    localIdProperty INTEGER NOT NULL UNIQUE PRIMARY KEY AUTOINCREMENT,
    localIdItemEntry INTEGER NOT NULL,
    propertyConfigId TEXT NOT NULL,
    value TEXT NOT NULL,
    FOREIGN KEY(localIdItemEntry) REFERENCES itemEntry(localIdItemEntry),
    FOREIGN KEY(propertyConfigId) REFERENCES propertyConfig(remoteIdPropertyConfig)
);

CREATE TABLE propertyConfig(
    remoteIdPropertyConfig TEXT NOT NULL UNIQUE PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    propertyType TEXT AS PropertyType NOT NULL
);

CREATE TABLE photo(
    localIdPhoto INTEGER NOT NULL UNIQUE PRIMARY KEY AUTOINCREMENT,
    remoteIdPhoto TEXT,
    fileName TEXT,
    filePath TEXT AS Uri
);

-- FUNCTIONS: USER TABLE ---------------------------------------------------------------------------
insertUser:
INSERT OR REPLACE INTO user(remoteIdUser, email, firstName, lastName)
VALUES (?,?,?,?);

insertUserArea:
INSERT OR REPLACE INTO area_user(remoteIdUser, remoteIdArea)
VALUES (?,?);

getUser:
SELECT
    user.remoteIdUser,
    user.email,
    user.firstName,
    user.lastName,
    group_concat(area.remoteIdArea)
FROM area
INNER JOIN area_user ON area.remoteIdArea = area_user.remoteIdArea
INNER JOIN user ON area_user.remoteIdUser = user.remoteIdUser
WHERE user.remoteIdUser = ?;

getPermittedAreasForUser:
SELECT
    area.remoteIdArea ,
    area.name ,
    area.geoDbID ,
    area.geoDbName ,
    area.geoDbFilePath ,
    area.geoDbCreateDate
FROM area
INNER JOIN area_user ON area.remoteIdArea = area_user.remoteIdArea
INNER JOIN user ON area_user.remoteIdUser = user.remoteIdUser
WHERE user.remoteIdUser = ?;

-- FUNCTIONS: AREA TABLE ---------------------------------------------------------------------------
insertArea:
INSERT OR REPLACE INTO area(remoteIdArea, name, geoDbID, geoDbName, geoDbFilePath, geoDbCreateDate)
VALUES (?,?,?,?,?,?);

getAreas:
SELECT * FROM area;


-- FUNCTIONS: STATE TABLE --------------------------------------------------------------------------
insertState:
INSERT OR REPLACE INTO state (remoteIdState, name, description)
VALUES (?,?,?);

getStates:
SELECT * FROM state;


-- FUNCTIONS: PROPERTY CONFIG TABLE ----------------------------------------------------------------
insertPropertyConfig:
INSERT OR REPLACE INTO propertyConfig(remoteIdPropertyConfig,name, description, propertyType)
VALUES (?,?,?,?);


getPropertyConfigs:
SELECT * FROM propertyConfig;

-- FUNCTIONS: ITEM TYPE TABLE ----------------------------------------------------------------------

insertItemType:
INSERT OR REPLACE INTO itemType (remoteIdItemType, name, description)
VALUES (?,?,?);


-- FUNCTIONS: ITEM TABLE ---------------------------------------------------------------------------

insertItem:
INSERT OR REPLACE INTO item (localIdItem, remoteIdItem, remoteIdArea,createDate, idReporter)
VALUES (?,?,?,?,?);

-- FUNCTIONS: ITEM ENTRY TABLE ---------------------------------------------------------------------

insertItemEntry:
INSERT OR REPLACE INTO itemEntry(localIdItemEntry,remoteIdItemEntry,localIdItem,idReporter,createDate,idItemType,location,idState,note)
VALUES (?,?,?,?,?,?,?,?,?);

-- FUNCTIONS: PROPERTY TABLE -----------------------------------------------------------------------

insertProperty:
INSERT OR REPLACE INTO property(localIdProperty, localIdItemEntry,propertyConfigId, value)
VALUES (?,?,?,?);



-- FUNCTIONS: OTHERS -------------------------------------------------------------------------------

getAutoIncrementedIdFromLastInsert:
SELECT last_insert_rowid();